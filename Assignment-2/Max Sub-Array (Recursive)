from numpy import asarray


# TODO: Replace all TODO comments (yes, this one too!)
"""

STOCK_PRICE_CHANGES  = [100, 113, 110, 85, 105, 102, 86, 63, 81,
101, 94, 106, 101, 79, 94, 90, 97]

"""
STOCK_PRICE_CHANGES = [13, -3, -25, 20, -3, -16, -23, 18,
                       20, -7, 12, -5, -22, 15, -4, 7]


# The maximum crossing subarray method for solving the max subarray problem
def find_maximum_crossing_subarray(A, low, mid, high):
    """
    Find the maximum subarray that crosses mid
    Return a tuple ((i, j), sum) where sum is the maximum subarray of A[i:j].
    """
    # By following the algorithm in text_book
    # To set the values to infinity
    # can also use decimal(-Infinity) after importing decimal

    temp_sum1 = 0
    i = mid
    left_ptr = i

    left_sum = -999999

    # To find the maximum sum at the left sub-array
    # Left array is from low to mid

    while i >= low:
        temp_sum1 = temp_sum1 + A[i]
        if temp_sum1 > left_sum:
            left_sum = temp_sum1
            left_ptr = i
        i = i - 1

    # To find the maximum sum at the left sub-array
    # Right array is from mid+1 to high

    temp_sum2 = 0
    j = mid + 1

    right_sum = -999999

    right_ptr = j
    while j <= high:
        temp_sum2 = temp_sum2 + A[j]
        if temp_sum2 > right_sum:
            right_sum = temp_sum2
            right_ptr = j
        j = j + 1

    return left_sum + right_sum, left_ptr, right_ptr


# The recursive method to solve max subarray problem

def find_maximum_subarray_recursive_helper(A, low=0, high=-1):
    """

    Return a tuple ((i, j), sum) where sum is the maximum subarray of A[i:j].


    """
    # Base case -> when there is only 1 element
    # Algorithm in textbook is implemented

    if low == high:
        return A[low], low, high
    else:
        mid = (low + high) // 2
        left_sum, left_low, left_high = \
            find_maximum_subarray_recursive_helper(A, low, mid)
        right_sum, right_low, right_high = \
            find_maximum_subarray_recursive_helper(A, mid + 1, high)
        cross_sum, cross_low, cross_high = \
            find_maximum_crossing_subarray(A, low, mid, high)
        if left_sum >= right_sum and left_sum >= cross_sum:
            return left_sum, left_low, left_high
        elif right_sum >= left_sum and right_sum >= cross_sum:
            return right_sum, right_low, right_high
        else:
            return cross_sum, cross_low, cross_high
    # The recursive method to solve max subarray problem


def find_maximum_subarray_recursive(A):
    """
    Return a tuple (i,j) where A[i:j] is the maximum subarray.
    """
    # To check if the array is empty

    if len(A) == 0:
        return None

    return find_maximum_subarray_recursive_helper(A, 0, len(A) - 1)



finalSum, l_index, r_index = \
        find_maximum_subarray_recursive(STOCK_PRICE_CHANGES)
    print
    print("Recursive method")
    print ((l_index, r_index), (finalSum))
