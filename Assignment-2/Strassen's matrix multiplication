print
print("Strassen's matrix multiplication")
print (square_matrix_multiply_strassens(A, B))

def sum_up(A, B):
    n = len(A)
    result = [[0 for i in range(0, n)] for j in range(0, n)]
    for i in range(0, n):
        for j in range(0, n):
            result[i][j] = A[i][j] + B[i][j]
    return result

    # subtracts two matrices


def difference(A, B):
    n = len(A)
    result = [[0 for i in range(0, n)] for j in range(0, n)]
    for i in range(0, n):
        for j in range(0, n):
            result[i][j] = A[i][j] - B[i][j]
    return result


def square_matrix_multiply_strassens(A, B):
    A = asarray(A)
    B = asarray(B)

    assert A.shape == B.shape
    assert A.shape == A.T.shape

    assert (len(A) & (len(A) - 1)) == 0, "A is not a power of 2"

    n = len(A)

    if n == 1:
        C = [[0 for j in range(0, n)] for i in range(0, n)]
        for i in range(0, n):
            for j in range(0, n):
                C[i][j] = A[i][j] * B[i][j]
        return C
    else:  # dividing the input matrices A and B
        new_n = int(n / 2)

    a11 = [[0 for i in range(0, new_n)] for j in range(0, new_n)]
    a12 = [[0 for i in range(0, new_n)] for j in range(0, new_n)]
    a21 = [[0 for i in range(0, new_n)] for j in range(0, new_n)]
    a22 = [[0 for i in range(0, new_n)] for j in range(0, new_n)]

    b11 = [[0 for i in range(0, new_n)] for j in range(0, new_n)]
    b12 = [[0 for i in range(0, new_n)] for j in range(0, new_n)]
    b21 = [[0 for i in range(0, new_n)] for j in range(0, new_n)]
    b22 = [[0 for i in range(0, new_n)] for j in range(0, new_n)]

    aTemp = [[0 for i in range(0, new_n)] for j in range(0, new_n)]
    bTemp = [[0 for i in range(0, new_n)] for j in range(0, new_n)]

    for i in range(0, new_n):
        for j in range(0, new_n):
            a11[i][j] = A[i][j]
            a12[i][j] = A[i][j + new_n]
            a21[i][j] = A[i + new_n][j]
            a22[i][j] = A[i + new_n][j + new_n]

            b11[i][j] = B[i][j]
            b12[i][j] = B[i][j + new_n]
            b21[i][j] = B[i + new_n][j]
            b22[i][j] = B[i + new_n][j + new_n]

    aTemp = sum_up(a11, a22)
    bTemp = sum_up(b11, b22)
    p1 = square_matrix_multiply_strassens(aTemp, bTemp)

    aTemp = sum_up(a21, a22)
    p2 = square_matrix_multiply_strassens(aTemp, b11)

    bTemp = difference(b12, b22)
    p3 = square_matrix_multiply_strassens(a11, bTemp)

    bTemp = difference(b21, b11)
    p4 = square_matrix_multiply_strassens(a22, bTemp)

    aTemp = sum_up(a11, a12)
    p5 = square_matrix_multiply_strassens(aTemp, b22)

    aTemp = difference(a21, a11)
    bTemp = sum_up(b11, b12)
    p6 = square_matrix_multiply_strassens(aTemp, bTemp)

    aTemp = difference(a12, a22)
    bTemp = sum_up(b21, b22)
    p7 = square_matrix_multiply_strassens(aTemp, bTemp)

    aTemp = sum_up(p1, p4)
    bTemp = sum_up(aTemp, p7)
    c11 = difference(bTemp, p5)
    c12 = sum_up(p3, p5)
    c21 = sum_up(p2, p4)

    aTemp = sum_up(p1, p3)
    bTemp = sum_up(aTemp, p6)
    c22 = difference(bTemp, p2)

    C = [[0 for i in range(0, n)] for j in range(0, n)]
    for i in range(0, new_n):
        for j in range(0, new_n):
            C[i][j] = c11[i][j]
            C[i][j + new_n] = c12[i][j]
            C[i + new_n][j] = c21[i][j]
            C[i + new_n][j + new_n] = c22[i][j]
    return C

    pass

